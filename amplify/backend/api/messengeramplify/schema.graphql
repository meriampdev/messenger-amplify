# This "input" configures a global authorization rule to enable public access to
# all models in this schema. Learn more about authorization rules here: https://docs.amplify.aws/cli/graphql/authorization-rules
input AMPLIFY { globalAuthRule: AuthRule = { allow: public } } # FOR TESTING ONLY!

type User
  @model
  {
    id: ID!
    createdAt: AWSDateTime!
    updatedAt: AWSDateTime!
    username: String! @index(name: "byUser", queryField: "userByUsername")
    email: String @index(name: "byEmail", queryField: "userByEmail")
    displayName: String 
    photo: String
    authpool: String
    conversations: [UserConversation] @hasMany(indexName: "convoByEmail", fields: ["email"])
  }

type UserConversation
  @model {
    id: ID!
    createdAt: AWSDateTime!
	  updatedAt: AWSDateTime!
    email: String! @index(name: "convoByEmail", queryField: "conversationByEmail", sortKeyFields: ["updatedAt"])
    displayName: String 
    photo: String 
    conversationId: ID! @index(name: "userConvoByConvoId", queryField: "userConversationByConvoId", sortKeyFields: ["updatedAt"])
    conversation: Conversation @hasOne(fields: ["conversationId"])
    messages: [Message] @hasMany(indexName: "byConversation", fields: ["conversationId"])
  }

type Conversation
  @model {
    id: ID! 
    createdAt: AWSDateTime!
	  updatedAt: AWSDateTime!
    name: String
    initiator: String
    members: [String] 
    recentMessageId: ID
    recentMessage: Message @hasOne(fields: ["recentMessageId"])
    userConversation: UserConversation @belongsTo
  }

type Message 
  @model {
    id: ID! @index(name: "byMessageId")
    conversationId: ID! @index(name: "byConversation", queryField: "messagesByConversation", sortKeyFields: ["createdAt"])
    reactions: [MessageReaction] @hasMany(indexName: "messageReactions", fields: ["id"])
    authorId: ID!
    author: User @hasOne(fields: ["authorId"])
    content: String!
    type: String!
    read: Boolean 
    createdAt: AWSDateTime!
    updatedAt: AWSDateTime!
  }

type MessageReaction
  @model {
    id: ID! 
    messageId: ID! @index(name: "messageReactions", sortKeyFields: ["createdAt"])
    authorId: ID!
    author: User @hasOne(fields: ["authorId"])
    reaction: String
    createdAt: AWSDateTime!
    updatedAt: AWSDateTime!
  }

input StringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
}

input IDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
}

input ConversationFilterInput {
  id: IDInput
  createdAt: StringInput
  updatedAt: StringInput
  conversationId: IDInput
  and: [ConversationFilterInput]
  or: [ConversationFilterInput]
  not: ConversationFilterInput
}

type Mutation {
  deleteUserConversationWhere(filter: ConversationFilterInput!): UserConversation
  deleteMessagesWhere(filter: ConversationFilterInput!): Message
}


type Subscription {
  onUserConversationCreate(email: String): UserConversation
    @aws_subscribe(mutations: ["createUserConversation"])
  onUserConversationUpdate(email: String): UserConversation
    @aws_subscribe(mutations: ["updateUserConversation"])
  onUserConversationDelete(email: String): UserConversation
    @aws_subscribe(mutations: ["deleteUserConversation"])
  onConversationCreated: Conversation
    @aws_subscribe(mutations: ["createConversation"])
  onConversationUpdated(id: ID!): Conversation
    @aws_subscribe(mutations: ["updateConversation"])
  onMessageCreated(conversationId: ID!): Message
    @aws_subscribe(mutations: ["createMessage"])
  onMessageReactionCreated(messageId: ID!): MessageReaction
    @aws_subscribe(mutations: ["createMessageReaction"])
  onMessageReactionRemoved(messageId: ID!): MessageReaction
    @aws_subscribe(mutations: ["deleteMessageReaction"])
}
